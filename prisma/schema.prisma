// MADACE v3.0 Database Schema
// This is your Prisma schema file, learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ==============================================================================
// AGENTS
// ==============================================================================

model Agent {
  id        String   @id @default(cuid())
  name      String   @unique
  title     String
  icon      String
  module    String
  version   String
  persona   Json // { role, identity, communication_style, principles }
  menu      Json // Array of menu items
  prompts   Json // Array of prompts
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  projectId String?

  memories     AgentMemory[]
  chatSessions ChatSession[]
  llmUsage     LLMUsage[]
  project      Project?      @relation(fields: [projectId], references: [id])

  @@index([projectId])
  @@index([module])
}

model AgentMemory {
  id             String    @id @default(cuid())
  agentId        String
  userId         String
  context        Json // Full memory context
  type           String // "short-term" | "long-term"
  category       String // "user_preference" | "project_context" | "conversation_summary" | "user_fact"
  key            String // Memory key (e.g., "communication_style", "project_name")
  value          String // Memory value (stored as string, can be JSON)
  importance     Int       @default(5) // 1-10 scale
  source         String    @default("inferred_from_chat") // "inferred_from_chat" | "user_input" | "system"
  lastAccessedAt DateTime  @default(now())
  accessCount    Int       @default(0)
  createdAt      DateTime  @default(now())
  expiresAt      DateTime?
  updatedAt      DateTime  @updatedAt

  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([agentId, userId])
  @@index([expiresAt])
  @@index([importance])
  @@index([lastAccessedAt])
  @@index([category])
}

// ==============================================================================
// WORKFLOWS
// ==============================================================================

model Workflow {
  id          String @id @default(cuid())
  name        String
  description String
  steps       Json // Array of workflow steps
  state       Json? // Current execution state
  projectId   String

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

// ==============================================================================
// CONFIGURATION
// ==============================================================================

model Config {
  id        String  @id @default(cuid())
  key       String  @unique
  value     Json
  encrypted Boolean @default(false)
  projectId String?

  project Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)

  @@index([projectId])
}

// ==============================================================================
// STATE MACHINE
// ==============================================================================

model StateMachine {
  id        String   @id @default(cuid())
  storyId   String   @unique
  title     String
  status    String // "BACKLOG" | "TODO" | "IN_PROGRESS" | "DONE"
  points    Int
  assignee  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId, status])
  @@index([status])
}

// ==============================================================================
// CHAT SYSTEM
// ==============================================================================

model ChatSession {
  id        String    @id @default(cuid())
  userId    String
  agentId   String
  startedAt DateTime  @default(now())
  endedAt   DateTime?
  projectId String?

  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  agent    Agent         @relation(fields: [agentId], references: [id], onDelete: Cascade)
  project  Project?      @relation(fields: [projectId], references: [id], onDelete: SetNull)
  messages ChatMessage[]
  llmUsage LLMUsage[]

  @@index([userId])
  @@index([agentId])
  @@index([projectId])
  @@index([startedAt])
}

model ChatMessage {
  id        String   @id @default(cuid())
  sessionId String
  role      String // "user" | "agent" | "system"
  content   String
  timestamp DateTime @default(now())
  replyToId String? // Optional: for threading (CHAT-002)
  provider  String? // LLM provider: "gemini" | "claude" | "openai" | "local"
  model     String? // LLM model name

  session ChatSession   @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  replyTo ChatMessage?  @relation("MessageReplies", fields: [replyToId], references: [id], onDelete: SetNull)
  replies ChatMessage[] @relation("MessageReplies")

  @@index([sessionId])
  @@index([timestamp])
  @@index([replyToId])
}

// ==============================================================================
// LLM USAGE TRACKING
// ==============================================================================

model LLMUsage {
  id               String   @id @default(cuid())

  // Request metadata
  provider         String   // 'gemini', 'claude', 'openai', 'local'
  model            String
  requestId        String?  // Unique request ID for tracing

  // User/Session context
  userId           String?
  sessionId        String?
  agentId          String?
  messageId        String?  // Associated chat message ID

  // Token usage
  promptTokens     Int      @default(0)
  completionTokens Int      @default(0)
  totalTokens      Int      @default(0)

  // Response metadata
  finishReason     String?  // 'stop', 'length', 'content_filter', 'error'
  responseTime     Int      // milliseconds
  success          Boolean
  errorMessage     String?

  // Cost tracking (estimated)
  estimatedCost    Float?   // In USD

  // Timestamps
  createdAt        DateTime @default(now())

  // Relations
  user             User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  chatSession      ChatSession? @relation(fields: [sessionId], references: [id], onDelete: SetNull)
  agent            Agent?       @relation(fields: [agentId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([sessionId])
  @@index([provider])
  @@index([createdAt])
  @@index([success])
}

// ==============================================================================
// PROJECTS & USERS
// ==============================================================================

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  agents       Agent[]
  workflows    Workflow[]
  configs      Config[]
  stories      StateMachine[]
  chatSessions ChatSession[]
  members      ProjectMember[]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())

  memories     AgentMemory[]
  chatSessions ChatSession[]
  projects     ProjectMember[]
  llmUsage     LLMUsage[]
}

model ProjectMember {
  id        String   @id @default(cuid())
  userId    String
  projectId String
  role      String // "owner" | "admin" | "member"
  joinedAt  DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@index([projectId])
  @@index([userId])
}
